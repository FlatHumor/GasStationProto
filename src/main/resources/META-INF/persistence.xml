<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">

    <persistence-unit name="user-unit" transaction-type="RESOURCE_LOCAL">
        <!-- transaction-type="JTA" -->
        <class>by.flathumor.entity.User</class>
        <class>by.flathumor.entity.Transaction</class>
        <class>by.flathumor.entity.UserSession</class>
        <class>by.flathumor.entity.Role</class>
        <class>by.flathumor.entity.Permission</class>
        <class>by.flathumor.entity.Product</class>
        <class>by.flathumor.entity.Purchase</class>
        <properties>

            <!-- MYSQL SECTION -->
            <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/>
            <property name="javax.persistence.jdbc.url"
                      value="jdbc:mysql://localhost:3306/gas_station?characterEncoding=UTF-8"/>
            <property name="javax.persistence.jdbc.user" value="test"/>
            <property name="javax.persistence.jdbc.password" value="test"/>
            <property name="javax.persistence.schema-generation.database.action" value="create"/>
            <property name="javax.persistence.sql-load-script-source" value="META-INF/sql/test_data.sql"/>

            <!-- OTHER PROPERTIES -->

            <!--<property name="javax.persistence.sql-load-script-source" value="META-INF/sql/load_script.sql"/>-->
            <!--<property name="javax.persistence.schema-generation.create-source" value="metadata"/>-->
            <!--<property name="javax.persistence.schema-generation.drop-source" value="metadata"/>-->

            <!-- SQLITE SECTION -->
            <!--<property name="dialect" value="org.hibernate.dialect.SQLiteDialect"/>-->
            <!--<property name="hibernate.connection.charSet" value="UTF-8"/>-->
            <!--<property name="hibernate.hbm2ddl.auto" value="create"/>-->
            <!--<property name="javax.persistence.jdbc.driver" value="org.sqlite.JDBC"/>-->
            <!--<property name="javax.persistence.jdbc.url"-->
                      <!--value="jdbc:sqlite:gas_station_proto.db"/>-->
            <!--<property name="javax.persistence.jdbc.user" value=""/>-->
            <!--<property name="javax.persistence.jdbc.password" value=""/>-->
            <!--<property name="javax.persistence.schema-generation.database.action" value="create"/>-->

        </properties>
    </persistence-unit>

</persistence>

<!--

Defaults
Default to JTA in a JavaEE environment and to RESOURCE_LOCAL in a JavaSE environment.

RESOURCE_LOCAL
With <persistence-unit transaction-type="RESOURCE_LOCAL"> you are responsible for EntityManager (PersistenceContext/Cache) creating and tracking

You must use the EntityManagerFactory to get an EntityManager
The resulting EntityManager instance is a PersistenceContext/Cache An EntityManagerFactory can be injected via the @PersistenceUnit annotation only (not @PersistenceContext)
You are not allowed to use @PersistenceContext to refer to a unit of type RESOURCE_LOCAL
You must use the EntityTransaction API to begin/commit around every call to your EntityManger
Calling entityManagerFactory.createEntityManager() twice results in two separate EntityManager instances and therefor two separate PersistenceContexts/Caches.
It is almost never a good idea to have more than one instance of an EntityManager in use (don't create a second one unless you've destroyed the first)
JTA
With <persistence-unit transaction-type="JTA"> the container will do EntityManager (PersistenceContext/Cache) creating and tracking.

You cannot use the EntityManagerFactory to get an EntityManager
You can only get an EntityManager supplied by the container
An EntityManager can be injected via the @PersistenceContext annotation only (not @PersistenceUnit)
You are not allowed to use @PersistenceUnit to refer to a unit of type JTA
The EntityManager given by the container is a reference to the PersistenceContext/Cache associated with a JTA Transaction.
If no JTA transaction is in progress, the EntityManager cannot be used because there is no PersistenceContext/Cache.
Everyone with an EntityManager reference to the same unit in the same transaction will automatically have a reference to the same PersistenceContext/Cache
The PersistenceContext/Cache is flushed and cleared at JTA commit time

-->